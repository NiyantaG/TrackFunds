@page "/transactions"

<nav class="navbar navbar-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1 fw-bold" style=" background: #7942CE;
        -webkit-text-fill-color: transparent;
        -webkit-background-clip: text;">
        Transactions
    </h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddTransactionDialog">
        Add transaction
    </button>
</nav>

<div class="d-flex gap-5">
    <h5> Balance: @_globalState.CurrentUser.BalanceAmount</h5>
    <h5> Debt: @_debtAmount</h5>
</div>

<table class="table">
    <thead>
        <tr>                
            <th class="align-baseline"><div>Type</div></th>
            <th class="align-baseline"><div>Tag</div></th>
            <th class="align-baseline"><div>Amount</div></th>
            <th class="align-baseline"><div>Date</div></th>
            <th class="align-baseline"><div>Note</div></th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<Transaction> transactionList = _transactions;
            transactionList = transactionList.OrderByDescending(t =>
            t.Date);

            foreach(var transaction in transactionList)
            {
				<tr>
					<td>
                    <span style="
                                    width: fit-content;
                                    padding: 3px 4px;
                                    border-radius: 5px;
                                    font-size: 11px;
                                    font-weight: bold;
                                    color: white;
                                    background: @(transaction.Type == TransactionType.Credit ? "green": transaction.Type == TransactionType.Debit ? "red" : transaction.Type == TransactionType.Debt ? "orange": "")
                    " >
                    @transaction.Type
                    </span>
                    </td>
					<td>@transaction.Tag</td>
					<td>@transaction.Amount</td>
					<td>@transaction.Date</td>
					<td>@transaction.Note</td>
				</tr>
			}
        }
    </tbody>
</table>

@if (_showAddTransactionDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnAddTransactionDialogClose" OkLabel="@_dialogOkLabel">
        <div>
            <label for="transactionType">Type*</label>
            <select class="form-select" aria-label="transactionType" @bind="_transactionModel.Type" required>
                   <option value="@TransactionType.Credit">Credit</option>
                   <option value="@TransactionType.Debit">Debit</option>
                    <option value="@TransactionType.Debt">Debt</option>
            </select>
        </div>
        
        <div class="form-floating">
            <input id="amount" type="number" class="form-control" @bind="_transactionModel.Amount" placeholder="Amount" required />
            <label for="amount">Amount*</label>
        </div>

        <div class="form-floating">
            <input id="tag" type="text" class="form-control" @bind="_transactionModel.Tag" placeholder="Tag" required />
            <label for="tag">Tag*</label>
        </div>
        
        @if (_transactionModel.Type == TransactionType.Debt)
        {
            <div class="form-floating">
                <input id="debtSource" type="text" class="form-control" @bind="_transactionModel.DebtSource" placeholder="Debt Source*" required />
                <label for="debtSource">Debt Source*</label>
            </div>
            <div class="form-floating">
                <input id="debtDueDate" type="date" class="form-control" @bind="_transactionModel.DebtDueDate" placeholder="Debt Due Date*" required />
                <label for="debtDueDate">Debt Due Date*</label>
            </div>
        }

        <div class="form-floating">
            <input id="note" type="text" class="form-control" @bind="_transactionModel.Note" placeholder="Note" />
            <label for="note">Note</label>
        </div>

        @if (!string.IsNullOrEmpty(_addTransactionErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_addTransactionErrorMessage" />
        }
    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showAddTransactionDialog { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _addTransactionErrorMessage { get; set; }
    private double _debtAmount { get; set; }
    private Transaction _transactionModel { get; set; }
    private List<Transaction> _transactions { get; set; }

    protected override void OnInitialized()
    {
        _transactions = TransactionService.GetAll(_globalState.CurrentUser.Id);
    }

    private void OpenAddTransactionDialog()
    {
        _dialogTitle = "Create Transaction";
        _dialogOkLabel = "Create";
        _transactionModel = new Transaction();
        _transactionModel.Id = Guid.Empty;
        _showAddTransactionDialog = true;
        _debtAmount = TransactionService.GetTotalPendingDebtAmount(_globalState.CurrentUser.Id);
    }

    private void OnAddTransactionDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showAddTransactionDialog = false;
        }
        else
        {
            try
            {
                var result  = TransactionService.Create(_globalState.CurrentUser.Id, _transactionModel.Amount, _transactionModel.Type, _transactionModel.Note, _transactionModel.Tag, _transactionModel.DebtSource, _transactionModel.DebtDueDate);
                _transactions = result.Item1;
                _globalState.CurrentUser = result.Item2;
                _debtAmount = TransactionService.GetTotalPendingDebtAmount(_globalState.CurrentUser.Id);
                _showAddTransactionDialog = false;
            }
            catch (Exception e)
            {
                _addTransactionErrorMessage = e.Message;
            }
        }
    }
}
