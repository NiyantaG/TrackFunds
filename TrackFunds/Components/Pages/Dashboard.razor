// Specifies the route for this page
@page "/dashboard"

// Navigation bar containing the dashboard title
<nav class="navbar navbar-light justify-content-between">
    // Dashboard title with gradient text effect
    <h1 class="navbar-brand mb-0 h1 fw-bold" style="background: #7942CE;
        -webkit-text-fill-color: transparent;
        -webkit-background-clip: text;">
        Dashboard
    </h1>
</nav>

// Main container for all dashboard cards using flex layout with gaps
<section class="d-flex flex-wrap gap-4 justify-content-center mt-4">
    // Current Balance Card - Shows user's current available balance
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-primary">Current Balance</div>
            <div class="card-text">
                <h1>@_curr @_globalState.CurrentUser.BalanceAmount</h1>
            </div>
        </div>
    </div>

    // Total Income Card - Displays sum of all income transactions
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-success">Total Income</div>
            <div class="card-text">
                <h1>@_curr @_totalIncome</h1>
            </div>
        </div>
    </div>

    // Total Expense Card - Shows sum of all expenses
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-danger">Total Expense</div>
            <div class="card-text">
                <h1>@_curr @_totalExpense</h1>
            </div>
        </div>
    </div>

    // Pending Debt Card - Displays total amount of unpaid debts
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-warning">Pending Debt</div>
            <div class="card-text">
                <h1>@_curr @_debtAmount</h1>
            </div>
        </div>
    </div>

    // Total Transactions Counter Card
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-info">Total Transactions</div>
            <div class="card-text">
                <h1> @_totalTransactions</h1>
            </div>
        </div>
    </div>

    // Highest Income Card - Shows the largest single income transaction
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-success">Highest Income</div>
            <div class="card-text">
                <h1>@_curr @_highestIncome</h1>
            </div>
        </div>
    </div>

    // Lowest Income Card - Shows the smallest single income transaction
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-secondary">Lowest Income</div>
            <div class="card-text">
                <h1>@_curr @_lowestIncome</h1>
            </div>
        </div>
    </div>

    // Highest Expense Card - Shows the largest single expense
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-danger">Highest Expense</div>
            <div class="card-text">
                <h1>@_curr @_highestExpense</h1>
            </div>
        </div>
    </div>

    // Lowest Expense Card - Shows the smallest single expense
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-dark">Lowest Expense</div>
            <div class="card-text">
                <h1>@_curr @_lowestExpense</h1>
            </div>
        </div>
    </div>

    // Highest Debt Card - Shows the largest single debt amount
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-warning">Highest Debt</div>
            <div class="card-text">
                <h1>@_curr @_highestDebt</h1>
            </div>
        </div>
    </div>

    // Lowest Debt Card - Shows the smallest single debt amount
    <div class="card text-center shadow-sm" style="width: 16rem;">
        <div class="card-body">
            <div class="card-title fw-bold text-muted">Lowest Debt</div>
            <div class="card-text">
                <h1>@_lowestDebt</h1>
            </div>
        </div>
    </div>
</section>>

<section>
    <div id=" Top 5 highest transaction">
        <br>
        <h1>Top 5 Highest Transaction</h1>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th class="align-baseline">
                    <div>Type</div>
                </th>
                <th class="align-baseline">
                    <div>Tag</div>
                </th>
                <th class="align-baseline">
                    <div>Amount</div>
                </th>
                <th class="align-baseline">
                    <div>Date</div>
                </th>
                <th class="align-baseline">
                    <div>Note</div>
                </th>
            </tr>
        </thead>
        <tbody>
            @{
                IEnumerable<Transaction> fivehighList = _topfivehigh;

                foreach (var transaction in fivehighList)
                {
                    <tr>
                        <td>
                            <span style="
                                                width: fit-content;
                                                padding: 3px 4px;
                                                border-radius: 5px;
                                                font-size: 11px;
                                                font-weight: bold;
                                                color: white;
                                                background: @(transaction.Type == TransactionType.Credit ? "green": transaction.Type == TransactionType.Debit ? "red" : transaction.Type == TransactionType.Debt ? "orange": "")
                                            ">
                                @transaction.Type
                            </span>
                        </td>
                        <td>@transaction.Tag</td>
                        <td>@_curr @transaction.Amount</td>
                        <td>@transaction.Date</td>
                        <td>@transaction.Note</td>
                    </tr>
                }
            }
        </tbody>
    </table>

</section>




<section>
    <div id=" Top 5 lowest transaction">
        <br>
        <h1>Top 5 Lowest Transaction</h1>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th class="align-baseline">
                    <div>Type</div>
                </th>
                <th class="align-baseline">
                    <div>Tag</div>
                </th>
                <th class="align-baseline">
                    <div>Amount</div>
                </th>
                <th class="align-baseline">
                    <div>Date</div>
                </th>
                <th class="align-baseline">
                    <div>Note</div>
                </th>
            </tr>
        </thead>
        <tbody>
            @{
                IEnumerable<Transaction> fivelowList = _topfivelow;

                foreach (var transaction in fivelowList)
                {
                    <tr>
                        <td>
                            <span style="
                                                    width: fit-content;
                                                    padding: 3px 4px;
                                                    border-radius: 5px;
                                                    font-size: 11px;
                                                    font-weight: bold;
                                                    color: white;
                                                    background: @(transaction.Type == TransactionType.Credit ? "green": transaction.Type == TransactionType.Debit ? "red" : transaction.Type == TransactionType.Debt ? "orange": "")
                                                    ">
                                @transaction.Type
                            </span>
                        </td>
                        <td>@transaction.Tag</td>
                        <td>@_curr @transaction.Amount</td>
                        <td>@transaction.Date</td>
                        <td>@transaction.Note</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</section>

// Section header for pending debts table
<section>
    <div id="pending-debt-dashboard">
        <br>
        <h1>Pending Debts Table </h1>
    </div>

    // Table to display all pending debts
    <table class="table">

        <thead>
            <tr>
                <th class="align-baseline">
                    <div>Tag</div>
                </th>
                <th class="align-baseline">
                    <div>Amount</div>
                </th>
                <th class="align-baseline">
                    <div>Created Date</div>
                </th>
                <th class="align-baseline">
                    <div>Debt Due Date</div>
                </th>
                <th class="align-baseline">
                    <div>Debt Source</div>
                </th>
                <th class="align-baseline">
                    <div>Debt Status</div>
                </th>
                <th class="align-baseline">
                    <div>Note</div>
                </th>
            </tr>
        </thead>

        // Table body containing debt records
        <tbody>
            @{
                // Get transaction list and sort by debt status
                IEnumerable<Transaction> transactionList = _transactions;
                transactionList = transactionList.OrderByDescending(t =>
                t.DebtStatus);

                // Loop through each transaction and display its details
                foreach (var transaction in transactionList)
                {
                    <tr>
                        <td>@transaction.Tag</td>
                        <td>@transaction.Amount</td>
                        <td>@transaction.Date</td>
                        <td>@transaction.DebtDueDate</td>
                        <td>@transaction.DebtSource</td>
                        // Status badge with color coding (red for pending, green for paid)
                        <td>
                            <span style="
                                                    width: fit-content;
                                                    padding: 3px 4px;
                                                    border-radius: 5px;
                                                    font-size: 11px;
                                                    font-weight: bold;
                                                    color: white;
                                                    background: @(transaction.DebtStatus == DebtStatus.Pending ? "red": "green")
                                                ">
                                @transaction.DebtStatus
                            </span>
                        </td>
                        <td>@transaction.Note</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</section>

// Code section containing component logic
@code {
    // Get the global state (user information) from the cascading parameter
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    // Properties to store dashboard data
    private double _debtAmount { get; set; }
    private double _totalIncome { get; set; }
    private double _totalExpense { get; set; }
    private int _totalTransactions { get; set; }
    private double _highestIncome { get; set; }
    private double _highestExpense { get; set; }
    private double _highestDebt { get; set; }
    private double _lowestIncome { get; set; }
    private double _lowestExpense { get; set; }
    private double _lowestDebt { get; set; }
    private string _curr { get; set; }
    private List<Transaction> _transactions { get; set; }
    private List<Transaction> _topfivehigh { get; set; }
    private List<Transaction> _topfivelow { get; set; }

    // Initialize component and load data
    protected override void OnInitialized()
    {
        // Get user's currency preference
        _curr = UsersService.GetCurrency(_globalState.CurrentUser.Id);

        // Calculate totals and statistics
        _totalIncome = TransactionService.GetTotalIncome(_globalState.CurrentUser.Id);
        _totalExpense = TransactionService.GetTotalExpense(_globalState.CurrentUser.Id);
        _debtAmount = TransactionService.GetTotalPendingDebtAmount(_globalState.CurrentUser.Id);
        _totalTransactions = TransactionService.GetTotalTransactionsCount(_globalState.CurrentUser.Id);

        // Get highest/lowest amounts for each transaction type
        _highestIncome = TransactionService.GetHighestTransactionAmount(_globalState.CurrentUser.Id, TransactionType.Credit);
        _lowestIncome = TransactionService.GetLowestTransactionAmount(_globalState.CurrentUser.Id, TransactionType.Credit);
        _highestExpense = TransactionService.GetHighestTransactionAmount(_globalState.CurrentUser.Id, TransactionType.Debit);
        _lowestExpense = TransactionService.GetLowestTransactionAmount(_globalState.CurrentUser.Id, TransactionType.Debit);

        // Get list of pending debts
        _transactions = TransactionService.GetPendingDebtList(_globalState.CurrentUser.Id, TransactionType.Debt);

        // Get highest/lowest debt amounts
        _highestDebt = TransactionService.GetHighestTransactionAmount(_globalState.CurrentUser.Id, TransactionType.Debt);
        _lowestDebt = TransactionService.GetLowestTransactionAmount(_globalState.CurrentUser.Id, TransactionType.Debt);
        _topfivehigh = TransactionService.GetTopFiveHighestTransactionList(_globalState.CurrentUser.Id, TransactionType.Credit);
        _topfivelow = TransactionService.GetTopFiveLowestTransactionList(_globalState.CurrentUser.Id, TransactionType.Credit);
    }
}